@page "/admin/instruments"
@attribute [Authorize]
@inject WebApp.Data.ApplicationDbContext Db
@using WebApp.Models
@using Microsoft.EntityFrameworkCore

<h3>Instrumentos</h3>

@if (!string.IsNullOrWhiteSpace(error))
{
  <p style="color:red">@error</p>
}

<form method="post" action="/admin/instruments/create">
  <input name="Nombre"        placeholder="Nombre" />
  <input name="Tipo"          placeholder="Tipo" />
  <input name="CodigoInterno" placeholder="Código interno" />
  <input name="Estado"        placeholder="Estado" value="Activo" />
  <button type="submit">Agregar</button>
</form>

<hr />

@if (items is null)
{
  <p>Cargando…</p>
}
else
{
  <table>
    <thead><tr><th>Nombre</th><th>Tipo</th><th>Código</th><th>Estado</th><th></th></tr></thead>
    <tbody>
      @foreach (var i in items)
      {
        <tr>
          <td>@i.Nombre</td><td>@i.Tipo</td><td>@i.CodigoInterno</td><td>@i.Estado</td>
          <td>
            <form method="post" action="/admin/instruments/delete" style="display:inline">
              <input type="hidden" name="Id" value="@i.Id" />
              <button type="submit">Eliminar</button>
            </form>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  private List<Instrument>? items;
  private string? error => Context?.Request?.Query["error"];
  [CascadingParameter] public HttpContext? Context { get; set; }

  protected override async Task OnInitializedAsync() =>
      items = await Db.Instruments.OrderBy(x => x.Nombre).AsNoTracking().ToListAsync();
}
