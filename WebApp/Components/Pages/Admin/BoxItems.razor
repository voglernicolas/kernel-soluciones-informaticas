@page "/admin/boxitems"
@attribute [Authorize]
@inject WebApp.Data.ApplicationDbContext Db
@using Microsoft.EntityFrameworkCore
@using WebApp.Models

<h3>Contenido de Cajas</h3>

<form method="get" action="/admin/boxitems">
  <select name="boxId">
    <option value="">-- Seleccioná una caja --</option>
    @foreach (var b in Boxes) { <option value="@b.Id" selected="@(boxId == b.Id)">@b.Nombre (@b.Especialidad)</option> }
  </select>
  <button type="submit">Ver</button>
</form>

@if (boxId is not null)
{
  <hr />
  <h4>Agregar instrumento</h4>
  <form method="post" action="/admin/boxitems/add">
    <input type="hidden" name="BoxId" value="@boxId" />
    <select name="InstrumentId">
      <option value="">-- Instrumento --</option>
      @foreach (var i in Instruments) { <option value="@i.Id">@i.Nombre (@i.CodigoInterno)</option> }
    </select>
    <input type="number" name="Cantidad" value="1" min="1" />
    <button type="submit">Agregar</button>
  </form>

  <h4>Contenido</h4>
  <table>
    <thead><tr><th>Instrumento</th><th>Tipo</th><th>Código</th><th>Cantidad</th><th></th></tr></thead>
    <tbody>
      @foreach (var it in BoxEntries)
      {
        <tr>
          <td>@it.Instrument!.Nombre</td>
          <td>@it.Instrument!.Tipo</td>
          <td>@it.Instrument!.CodigoInterno</td>
          <td>@it.Cantidad</td>
          <td>
            <form method="post" action="/admin/boxitems/remove" style="display:inline">
              <input type="hidden" name="Id" value="@it.Id" />
              <input type="hidden" name="BoxId" value="@boxId" />
              <button type="submit">Quitar</button>
            </form>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  private List<Box> Boxes = new();
  private List<Instrument> Instruments = new();
  private List<BoxItem> BoxEntries = new();
  private int? boxId;

  [CascadingParameter] public HttpContext? Context { get; set; }

  protected override async Task OnInitializedAsync()
  {
      Boxes = await Db.Boxes.OrderBy(b => b.Nombre).AsNoTracking().ToListAsync();
      Instruments = await Db.Instruments.OrderBy(i => i.Nombre).AsNoTracking().ToListAsync();
      if (int.TryParse(Context?.Request?.Query["boxId"], out var q)) boxId = q;
      await LoadItems();
  }

  private async Task LoadItems()
  {
      if (boxId is null) { BoxEntries.Clear(); return; }
      BoxEntries = await Db.BoxItems
        .Where(x => x.BoxId == boxId)
        .Include(x => x.Instrument)
        .OrderBy(x => x.Instrument!.Nombre)
        .AsNoTracking()
        .ToListAsync();
  }
}
