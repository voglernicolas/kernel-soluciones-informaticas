@page "/admin/boxes"
@attribute [Authorize]
@inject WebApp.Data.ApplicationDbContext Db
@using WebApp.Models
@using Microsoft.EntityFrameworkCore

<h3>Cajas</h3>

@if (!string.IsNullOrWhiteSpace(error))
{
  <p style="color:red">@error</p>
}

<form method="post" action="/admin/boxes/create">
  <input name="Nombre" placeholder="Nombre" />
  <input name="Especialidad" placeholder="Especialidad" />
  <!-- patrón checkbox en SSR: false + true -->
  <input type="hidden" name="Activo" value="false" />
  <label><input type="checkbox" name="Activo" value="true" checked /> Activa</label>
  <button type="submit">Agregar</button>
</form>

<hr />

@if (items is null)
{
  <p>Cargando…</p>
}
else
{
  <table>
    <thead><tr><th>Nombre</th><th>Especialidad</th><th>Activa</th><th></th></tr></thead>
    <tbody>
      @foreach (var b in items)
      {
        <tr>
          <td>@b.Nombre</td><td>@b.Especialidad</td><td>@(b.Activo ? "Sí" : "No")</td>
          <td>
            <form method="post" action="/admin/boxes/delete" style="display:inline">
              <input type="hidden" name="Id" value="@b.Id" />
              <button type="submit">Eliminar</button>
            </form>
          </td>
        </tr>
      }
    </tbody>
  </table>
}

@code {
  private List<Box>? items;
  private string? error => Context?.Request?.Query["error"];
  [CascadingParameter] public HttpContext? Context { get; set; }

  protected override async Task OnInitializedAsync() =>
      items = await Db.Boxes.OrderBy(x => x.Nombre).AsNoTracking().ToListAsync();
}
